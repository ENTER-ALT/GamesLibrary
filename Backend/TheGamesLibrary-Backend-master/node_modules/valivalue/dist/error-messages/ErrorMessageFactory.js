"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMessageFactories = void 0;
const luxon_1 = require("luxon");
/**
 * The deafult ErrorMessageFactories.
 */
exports.errorMessageFactories = {
    numbers: {
        validateMinValue: (subject, value, min) => `${subject} must not be lower than ${min}.`,
        validateMaxValue: (subject, value, max) => `${subject} must not be higher than ${max}.`,
        validateMinAndMaxValue: (subject, value, min, max) => `${subject} must not be lower than ${min} and must not be higher than ${max}.`,
        validateIsPositive: (subject, value) => `${subject} must be a positive number.`,
        validateIsNegative: (subject, value) => `${subject} must be a negative number.`,
        validateIsDivisibleBy: (subject, value, divisibleBy) => `${subject} must be divisible by ${divisibleBy}.`,
        validateIsFactorOf: (subject, value, factorOf) => `${subject} must be a factor of ${factorOf}.`,
        validateIsEven: (subject, value) => `${subject} must be even.`,
        validateIsOdd: (subject, value) => `${subject} must be odd.`
    },
    strings: {
        validateNotEmpty: (subject, value) => `${subject} must not be empty.`,
        validateMinLength: (subject, value, min) => `${subject} must at least be ${min} character(s) long.`,
        validateMaxLength: (subject, value, max) => `${subject} can not have more than ${max} character(s).`,
        validateMinAndMaxLength: (subject, value, min, max) => `${subject} must be between ${min} and ${max} characters long.`,
        validateDoesNotContain: (subject, value, forbidden) => `${subject} can not contain '${forbidden}'.`,
        validateResemblesEmail: (subject, value) => `${subject} must be an email address.`
    },
    objects: {
        validateNotNull: (subject, value) => `${subject} can not be null.`,
        validateNotUndefined: (subject, value) => `${subject} can not be undefined.`,
        validateNotNullOrUndefined: (subject, value) => `${subject} can not be null or undefined.`
    },
    timestamps: {
        validateIsAfter: (subject, value, isAfter) => `${subject} must be after ${isAfter.toLocaleString(luxon_1.DateTime.DATETIME_FULL)}.`,
        validateIsBefore: (subject, value, isBefore) => `${subject} must be before ${isBefore.toLocaleString(luxon_1.DateTime.DATETIME_FULL)}.`,
        validateIsInPast: (subject, value) => `${subject} must be in the past.`,
        validateIsInFuture: (subject, value) => `${subject} must be in the future.`
    }
};
