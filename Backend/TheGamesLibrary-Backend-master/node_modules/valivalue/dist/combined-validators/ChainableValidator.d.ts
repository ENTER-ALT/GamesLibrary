import { NumberValidator } from "../validators/NumberValidator";
import { ObjectValidator } from "../validators/ObjectValidator";
import { StringValidator } from "../validators/StringValidator";
import { TimestampValidator } from "../validators/TimestampValidator";
import { ValidationReport } from "../validation-result/ValidationReport";
/**
 * The ChainableValidator allows you to call multiple validation methods with only 1 validator object.
 *
 * @class ChainableValidator
 */
export declare class ChainableValidator {
    private readonly throwOnFailure;
    readonly results: ValidationReport<unknown>[];
    readonly objects: ObjectValidator<unknown, ChainableValidator>;
    readonly strings: StringValidator<ChainableValidator>;
    readonly numbers: NumberValidator<ChainableValidator>;
    readonly timestamps: TimestampValidator<ChainableValidator>;
    /**
     * Construct a new ChainableValidator
     *
     * @param {boolean} [throwOnFailure=false] - Should the validator throw directly when a validation failure occurs.
     */
    constructor(throwOnFailure?: boolean);
    private add;
    /**
     * Check whether all validations (so far) are successful.
     *
     * @returns {boolean} Indication whether the validations are successful.
     */
    isSuccess(): boolean;
    /**
     * Check whether any validation (so far) is a failure.
     *
     * @returns {boolean} Inidication whether any validation is a failure.
     */
    isFailure(): boolean;
    /**
     * Get the list of errors (so far).
     */
    get errors(): Error[];
    /**
     * In case of any validation failure, throw the first error that occured.
     */
    throw(): void;
}
