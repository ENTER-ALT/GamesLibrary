import { DateTime } from "luxon";
import { AbstractValidator } from "./AbstractValidator";
/**
 * The TimestampValidator is a validator that contains methods to validate values of type luxon DateTime.
 *
 * @class TimestampValidator<OutputType>
 */
export declare class TimestampValidator<OutputType> extends AbstractValidator<DateTime, OutputType> {
    /**
     * Validate whether the supplied timestamp is after the supplied minimum timestamp.
     *
     * @param {DateTime} value - The value to be validated.
     * @param {DateTime} isAfter - The lower bound.
     * @param {string} [subject=Timestamp] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateIsAfter(value: DateTime, isAfter: DateTime, subject?: string, errorMessageFactory?: (subject: string, value: DateTime, isAfter: DateTime) => string): OutputType;
    /**
     * Validate whether the supplied timestamp is before the supplied maximum timestamp.
     *
     * @param {DateTime} value - The value to be validated.
     * @param {DateTime} isBefore - The upper bound.
     * @param {string} [subject=Timestamp] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateIsBefore(value: DateTime, isBefore: DateTime, subject?: string, errorMessageFactory?: (subject: string, value: DateTime, isBefore: DateTime) => string): OutputType;
    /**
     * Validate whether the supplied timestamp is in the past.
     *
     * @param {DateTime} value - The value to be validated.
     * @param {string} [subject=Timestamp] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateIsInPast(value: DateTime, subject?: string, errorMessageFactory?: (subject: string, value: DateTime) => string): OutputType;
    /**
     * Validate whether the supplied timestamp is in the future.
     *
     * @param {DateTime} value - The value to be validated.
     * @param {string} [subject=Timestamp] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateIsInFuture(value: DateTime, subject?: string, errorMessageFactory?: (subject: string, value: DateTime) => string): OutputType;
}
