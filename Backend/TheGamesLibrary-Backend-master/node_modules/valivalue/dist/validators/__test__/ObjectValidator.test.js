"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DefaultErrorFactory_1 = require("../../errors/DefaultErrorFactory");
const ThrowingValidationResult_1 = require("../../validation-result/ThrowingValidationResult");
const ValidationOptions_1 = require("../../ValidationOptions");
const ObjectValidator_1 = require("../ObjectValidator");
const VALIDATOR = new ObjectValidator_1.ObjectValidator(new ValidationOptions_1.ValidationOptions(DefaultErrorFactory_1.defaultErrorFactory, (0, ThrowingValidationResult_1.throwingValidationResult)()));
describe('ObjectValidator', () => {
    describe('validateNotNull', () => {
        test('Should fail if supplied object is null', () => {
            expect(() => VALIDATOR.validateNotNull(null)).toThrow();
        });
        test('Should not fail if supplied object is not null', () => {
            expect(() => VALIDATOR.validateNotNull({})).not.toThrow();
            expect(() => VALIDATOR.validateNotNull(undefined)).not.toThrow();
        });
    });
    describe('validateNotUndefined', () => {
        test('Should fail if supplied object is undefined', () => {
            expect(() => VALIDATOR.validateNotUndefined(undefined)).toThrow();
        });
        test('Should not fail if supplied object is not undefined', () => {
            expect(() => VALIDATOR.validateNotUndefined(null)).not.toThrow();
            expect(() => VALIDATOR.validateNotUndefined({})).not.toThrow();
        });
    });
    describe('validateNotNullOrUndefined', () => {
        test('Should fail if supplied object is null or undefined', () => {
            expect(() => VALIDATOR.validateNotNullOrUndefined(null)).toThrow();
            expect(() => VALIDATOR.validateNotNullOrUndefined(undefined)).toThrow();
        });
        test('Should not fail if supplied object is not null or not undefined', () => {
            expect(() => VALIDATOR.validateNotNullOrUndefined({})).not.toThrow();
        });
    });
});
