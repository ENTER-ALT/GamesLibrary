"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractValidator = void 0;
/**
 * The AbstractValidator supertype provides some default methods that are used by all the child Validators.
 */
class AbstractValidator {
    constructor(validationOptions) {
        this.validationOptions = validationOptions;
    }
    /**
     * Get the ValidationResultFactory for this validator.
     */
    get resultFactory() {
        return this.validationOptions.validationResultFactory;
    }
    /**
     * Get the ErrorFactory for this validator.
     */
    get errorFactory() {
        return this.validationOptions.errorFactory;
    }
    /**
     * Create a failed validation result for provided value and with provided error message.
     *
     * @param {InputType} value - The value that has been validated.
     * @param {string} errorMessage - The error message for the failed validation.
     * @returns {OutputType} The validation result for a failed validation.
     */
    failure(value, errorMessage) {
        return this.resultFactory(value, this.errorFactory(errorMessage));
    }
    /**
     * Create a succesful validation result for provided value.
     *
     * @param {InputType} value - The value that has been validated.
     * @returns {OutputType} The validation result for a failed validation.
     */
    success(value) {
        return this.resultFactory(value);
    }
    /**
     * Handle the validation for provided value, provided condition and provided error message factory.
     *
     * @param {InputType} value - The value that needs to be validated.
     * @param {boolean} condition - Whether validation failed or not.
     * @param {() => string} errorMessageFactory - The error message factory. This is an anonymous function that will only be executed in case of failed validation.
     * @returns {OutputType} The result of the validation.
     */
    handle(value, condition, errorMessageFactory) {
        if (condition) {
            return this.failure(value, errorMessageFactory());
        }
        return this.success(value);
    }
}
exports.AbstractValidator = AbstractValidator;
