"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectValidator = void 0;
const AbstractValidator_1 = require("./AbstractValidator");
const ErrorMessageFactory_1 = require("../error-messages/ErrorMessageFactory");
const { objects: objectFactories } = ErrorMessageFactory_1.errorMessageFactories;
const DEFAULT_SUBJECT = "Object";
/**
 * The ObjectValidator is a validator that contains methods to validate values of type object.
 *
 * @class ObjectValidator<InputType, OutputType>
 */
class ObjectValidator extends AbstractValidator_1.AbstractValidator {
    /**
     * Validate whether the provided value is not null.
     *
     * @param {InputType} value - The value to be validated.
     * @param {string} [subject=Object] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateNotNull(value, subject = DEFAULT_SUBJECT, errorMessageFactory = objectFactories.validateNotNull) {
        return this.handle(value, value === null, () => errorMessageFactory(subject, value));
    }
    /**
     * Validate whether the provided value is not undefined.
     *
     * @param {InputType} value - The value to be validated.
     * @param {string} [subject=Object] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateNotUndefined(value, subject = DEFAULT_SUBJECT, errorMessageFactory = objectFactories.validateNotUndefined) {
        return this.handle(value, value === undefined, () => errorMessageFactory(subject, value));
    }
    /**
     * Validate whether the provided value is not null or undefined.
     *
     * @param {InputType} value - The value to be validated.
     * @param {string} [subject=Object] - The subject being validated, which will be used in the errorMessageFactory.
     * @param errorMessageFactory - The errorMessageFactory that will be used to construct an error message in case of validation failure.
     * @returns {OutputType} The result of the validation.
     */
    validateNotNullOrUndefined(value, subject = DEFAULT_SUBJECT, errorMessageFactory = objectFactories.validateNotNullOrUndefined) {
        return this.handle(value, value === null || value === undefined, () => errorMessageFactory(subject, value));
    }
}
exports.ObjectValidator = ObjectValidator;
