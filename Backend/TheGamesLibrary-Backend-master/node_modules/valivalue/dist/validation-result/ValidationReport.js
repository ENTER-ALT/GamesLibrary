"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validationReportFactory = exports.ValidationReport = void 0;
/**
 * A ValidationReport holds the result of a validation.
 * If the validation failed, the report will contain both the value that was validated, and the Error representing the failed validation.
 * If the validation was a success, only the validated value will be embedded.
 *
 * @class ValidationReport
 */
class ValidationReport {
    constructor(value, error) {
        this.value = value;
        this.error = error;
        // Do nothing
    }
    /**
     * Check whether the validation was a success.
     *
     * @returns {boolean} Indicating whether the validation was a success or not.
     */
    isSuccess() {
        return !this.error;
    }
    /**
     * Check whether the validation was a failure.
     *
     * @returns {boolean} Indicating whether the validation was a failure or not.
     */
    isFailure() {
        return !!this.error;
    }
    /**
     * If the validation was a failure, throw the resulting failed validation Error.
     * If the validation was a sucess, nothing will be thrown.
     */
    throw() {
        if (this.isFailure()) {
            throw this.error;
        }
    }
}
exports.ValidationReport = ValidationReport;
/**
 * A factory to create validationReportFactories with a specific InputType.
 *
 * @returns {ValidationResultFactory<InputType, ValidationReport<InputType>>}
 */
function validationReportFactory() {
    return (value, error) => new ValidationReport(value, error);
}
exports.validationReportFactory = validationReportFactory;
