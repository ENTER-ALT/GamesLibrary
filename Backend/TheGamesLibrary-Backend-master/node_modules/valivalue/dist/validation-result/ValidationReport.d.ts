import { ValidationResultFactory } from "./ValidationResultFactory";
/**
 * A ValidationReport holds the result of a validation.
 * If the validation failed, the report will contain both the value that was validated, and the Error representing the failed validation.
 * If the validation was a success, only the validated value will be embedded.
 *
 * @class ValidationReport
 */
export declare class ValidationReport<InputType> {
    readonly value: InputType;
    readonly error?: Error | undefined;
    constructor(value: InputType, error?: Error | undefined);
    /**
     * Check whether the validation was a success.
     *
     * @returns {boolean} Indicating whether the validation was a success or not.
     */
    isSuccess(): boolean;
    /**
     * Check whether the validation was a failure.
     *
     * @returns {boolean} Indicating whether the validation was a failure or not.
     */
    isFailure(): boolean;
    /**
     * If the validation was a failure, throw the resulting failed validation Error.
     * If the validation was a sucess, nothing will be thrown.
     */
    throw(): void;
}
/**
 * A factory to create validationReportFactories with a specific InputType.
 *
 * @returns {ValidationResultFactory<InputType, ValidationReport<InputType>>}
 */
export declare function validationReportFactory<InputType>(): ValidationResultFactory<InputType, ValidationReport<InputType>>;
